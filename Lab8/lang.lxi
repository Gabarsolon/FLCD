%{
#include <string.h>

int lexically_correct = 1;
%}

%option noyywrap
%option yylineno

DIGIT   [0-9]
LETTER  [A-Za-z_]
OPERATOR   [+\-*/=<>%]|"!="|"<=="|"==>"|"==="|"+="|"-="
SEPARATOR   [\(\)\[\]\{\};,]
IDENTIFIER  {LETTER}({DIGIT}|{LETTER})*
NON_ZERO_DIGIT  [1-9]
NATURAL_NUMBER  {NON_ZERO_DIGIT}{DIGIT}*
INTEGER [+-]?{NATURAL_NUMBER}|0
CHARACTER   '[^\']*'
STRING  \"[^\"]*\"
COMMENT #.*#
RESERVED_WORD   int|alpha|arrr|fibre|make|if|fi|of|prgr|read|show|define|now|persistent|for|while|and|or|not|starts|from|transforms|stops|at|stdin|stdout
VALID_TOKEN {IDENTIFIER}|{INTEGER}|{STRING}|{RESERVED_WORD}
TOKEN_SEPARATOR {SEPARATOR}|{OPERATOR}


%%
{VALID_TOKEN}/({TOKEN_SEPARATOR}|[\n\t ]) printf("%s\n", yytext);
{TOKEN_SEPARATOR} printf("%s\n", yytext);

{COMMENT} /* eat up comments */ 
[ \n\t]+  /* eat up whitespace */ 

. {
    printf("Lexical error on line %d, token \"%s\" is not an reserved word, operator, separator, identifier or constant\n", yylineno, yytext);
    lexically_correct = 0;
}


%%

int main(int argc, char** argv){
    printf("----------------------------------------\n");
    ++argv, --argc; //skip over program name
    if(argc > 0)
        yyin = fopen(argv[0], "r");
    else
        yyin = stdin;
    yylex();
    if(lexically_correct)
        printf("Lexically correct\n");
    printf("----------------------------------------\n");
    return 0;
}