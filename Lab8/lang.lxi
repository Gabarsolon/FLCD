%{
int lexically_correct = 1;
%}

%option noyywrap
%option yylineno

DIGIT   [0-9]
LETTER  [A-Za-z_]
OPERATOR   [+\-*/=<>%]|"!="|"<=="|"==>"|"==="|"+="|"-="
SEPARATOR   [\(\)\[\]\{\};, ]
IDENTIFIER  {LETTER}({DIGIT}|{LETTER})*
NON_ZERO_DIGIT  [1-9]
NATURAL_NUMBER  {NON_ZERO_DIGIT}{DIGIT}*
INTEGER [+-]?{NATURAL_NUMBER}|0
CHARACTER   '[^\']*'
STRING  \"[^\"]*\"
COMMENT #.*#
VALID_TOKEN {OPERATOR}|{IDENTIFIER}|{INTEGER}|{STRING}|{COMMENT}


%%
int|alpha|arrr|fibre|make|if|fi|of|prgr|read|show|define|now
persistent|for|while|and|or|not|starts|from|transforms|stops|at|stdin|stdout   //printf("Reserved keyword: %s\n", yytext);
{IDENTIFIER}   //printf("Asta ii identificator smr eu de nu: %s\n", yytext);
{OPERATOR}  //printf("Operator: %s\n", yytext);
{SEPARATOR} //printf("Separator: %s\n", yytext);
{INTEGER}   //printf("Numar intgred, duh!: %s\n", yytext);
{CHARACTER} //printf("Characterul uman perspicacitant: %s\n", yytext);
{STRING}    //printf("STRING, omg: %s\n", yytext);
{COMMENT}   //printf("Comentezi, huh?!: %s\n", yytext);

[ \t\n]+ 		/* eat up whitespace */ 

.   {
    printf("Lexical error on line %d, token \"%s\" is not an reserved word, operator, separator, identifier or constant\n", yylineno, yytext);
    lexically_correct = 0;
    };

%%

int main(int argc, char** argv){
    printf("-------------------------------------\n");
    ++argv, --argc; //skip over program name
    if(argc > 0)
        yyin = fopen(argv[0], "r");
    else
        yyin = stdin;
    yylex();
    if(lexically_correct)
        printf("Lexically correct\n");
    printf("----------------------------------------\n");
    return 0;
}