%{
#include <string.h>

int lexically_correct = 1;
%}

%option noyywrap
%option yylineno

DIGIT   [0-9]
LETTER  [A-Za-z_]
OPERATOR   [+\-*/=<>%]|"!="|"<=="|"==>"|"==="|"+="|"-="
SEPARATOR   [\(\)\[\]\{\};,\n\t]|" "
IDENTIFIER  {LETTER}({DIGIT}|{LETTER})*
NON_ZERO_DIGIT  [1-9]
NATURAL_NUMBER  {NON_ZERO_DIGIT}{DIGIT}*
INTEGER [+-]?{NATURAL_NUMBER}|0
CHARACTER   '[^\']*'
STRING  \"[^\"]*\"
COMMENT #.*#
RESERVED_WORD   int|alpha|arrr|fibre|make|if|fi|of|prgr|read|show|define|now|persistent|for|while|and|or|not|starts|from|transforms|stops|at|stdin|stdout
VALID_TOKEN {IDENTIFIER}|{INTEGER}|{STRING}|{COMMENT}|{RESERVED_WORD}
TOKEN_SEPARATOR {SEPARATOR}|{OPERATOR}


%%
^{VALID_TOKEN}{TOKEN_SEPARATOR} 
{VALID_TOKEN}{TOKEN_SEPARATOR}  
{VALID_TOKEN}$  
^{VALID_TOKEN}$ 
{TOKEN_SEPARATOR}

. {
    char invalid_token[256];
    int index_invalid_token = 0;
    invalid_token[index_invalid_token++] = yytext[0];
    char current_character;
    while(1){
        current_character = input();
        if(current_character == EOF || strchr("()[]{};,\n\t[+-*/=<>%] ", current_character) != NULL){
            unput(current_character);
            break;
        }
        invalid_token[index_invalid_token++] = current_character;
    }
    invalid_token[index_invalid_token] = '\0';
    printf("Lexical error on line %d, token \"%s\" is not an reserved word, operator, separator, identifier or constant\n", yylineno, invalid_token);
    lexically_correct = 0;
    };

%%

int main(int argc, char** argv){
    printf("----------------------------------------\n");
    ++argv, --argc; //skip over program name
    if(argc > 0)
        yyin = fopen(argv[0], "r");
    else
        yyin = stdin;
    yylex();
    if(lexically_correct)
        printf("Lexically correct\n");
    printf("----------------------------------------\n");
    return 0;
}