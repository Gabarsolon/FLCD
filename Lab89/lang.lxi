%{
#include <string.h>
#include "lang.tab.h"

int lexically_correct = 1;
%}

%option noyywrap
%option yylineno

%x LEXICAL_ERROR

DIGIT   [0-9]
LETTER  [A-Za-z_]
OPERATOR   [+\-*/=<>%]|"!="|"<=="|"==>"|"==="|"+="|"-="
SEPARATOR   [\(\)\[\]\{\};,]
IDENTIFIER  {LETTER}({DIGIT}|{LETTER})*
NON_ZERO_DIGIT  [1-9]
NATURAL_NUMBER  {NON_ZERO_DIGIT}{DIGIT}*
INTEGER [+-]?{NATURAL_NUMBER}|0
CHARACTER   '[^\']*'
STRING  \"[^\"]*\"
COMMENT #.*#
RESERVED_WORD   int|alpha|arrr|fibre|make|if|fi|of|prgr|read|show|define|now|persistent|for|while|and|or|not|starts|from|transforms|stops|at|stdin|stdout
VALID_TOKEN {IDENTIFIER}|{INTEGER}|{STRING}|{RESERVED_WORD}
TOKEN_SEPARATOR {SEPARATOR}|{OPERATOR}
WHITE_SPACE [ \n\t]

%%
{VALID_TOKEN}/({TOKEN_SEPARATOR}|{WHITE_SPACE}) {return BISON;}
{TOKEN_SEPARATOR} //printf("%s\n", yytext);

{COMMENT} /* eat up comments */ 
{WHITE_SPACE}+  /* eat up whitespace */ 


. {
    BEGIN(LEXICAL_ERROR);
    yymore();
}

<LEXICAL_ERROR>([^+\-*/=<>%!\(\)\[\]\{\};,\n\t ])*/({TOKEN_SEPARATOR}|{WHITE_SPACE}) {
    printf("Lexical error on line %d, token \"%s\" is not an reserved word, operator, separator, identifier or constant\n", yylineno, yytext);
    lexically_correct = 0;
    BEGIN(INITIAL);
}
